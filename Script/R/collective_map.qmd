---
title: "Visualizing Non-Overlapping Disadvantaged Census Tracts: Bolstering CalEnviroScreen Considerations"
author: "Sofia Ingersoll"
format:
  html:
    code-fold: true
    code-summary: "View the code"
embedded-sources: true
output:
  html_document:
    print_df: paged
    toc: yes
    toc_depth: 4
    toc_float: yes
---

```{r set-up, message = FALSE}
library(sf)
#library(sp)
library(tmap)
library(here)
library(stars)
library(terra)
library(raster)
library(maptiles)
library(tidyverse)
library(leaflet)
#library(sfheaders)
#library(ggspatial)
library(tmaptools)
library(osmextract) 
library(RColorBrewer)
```


# Read CalEnviroScreen Data
```{r read_n_wrangle_calenviro}
calenviro <- st_read(here("data","CalEnviroScreen","CES4 Final Shapefile.shp")) %>% 
  janitor::clean_names() %>% 
  st_make_valid()

# housing burden is a good parameter to visualize
# let's get an idea of the bin distribution for plotting
range(calenviro$hous_burd)

# remove the -999.0, that's an NA
calenviro <- calenviro %>% 
  filter(hous_burd != -999.0)

# check! nice!
range(calenviro$hous_burd)

calenviro <- st_transform(calenviro,
                          4326) %>% 
  st_make_valid()
```


# SB535 Data
```{r read_n_wrangle_SB535}
# sb535 xlsx sheet
# inspecting the tribal data provided on tab 3, there is no geolocation information
# so unfortunately these can't be plotted 

# Define the path to your Excel file
sb535_path <- here("data", "SB535_disadv_communities", "SB535DACresultsdatadictionary_F_2022.xlsx")

# Get the names of all sheets in the Excel file
sheet_names <- readxl::excel_sheets(sb535_path)

# Print sheet names to verify and select the correct one
print(sheet_names)

# Read the fourth sheet directly by its name or index
sb535_tract_data <- readxl::read_xlsx(sb535_path, sheet = sheet_names[4]) %>% 
  janitor::clean_names() %>%
  as.data.frame()

# housing burden is a good parameter to visualize
# let's get an idea of the bin distribution for plotting
range(sb535_tract_data$housing_burden)

# remove the -999.0, that's an NA
sb535_tract_data <- sb535_tract_data %>% 
  
  mutate(housing_burden = as.numeric(housing_burden)) %>% 
  
  filter(!is.na(housing_burden))

# check! nice!
range(sb535_tract_data$housing_burden)

sb535_geo <- sb535_tract_data %>% 
  
  filter(!is.na(longitude) & !is.na(latitude)) %>% 
  
  st_as_sf(coords = c('longitude', "latitude"),
                      crs = 4326) %>% 
  st_make_valid()
```

# SD CEI Data
```{r read_n_wrangle_sd_cei}
sd_cei <- st_read(here("data","sd_climate_equity_index","City_of_San_Diego_CEI_2021_Revision.shp")) %>% 
  janitor::clean_names() %>% 
  st_make_valid()

```

# White House Data
```{r read_n_wranlge_wh}
white_house <- st_read(here("data", "white_house_map","usa","usa.shp"),
                       quiet = TRUE) %>% 
  janitor::clean_names()

white_house <- white_house %>% 
  filter(sf == "California")

# remove empty geometries
white_house <- white_house[!st_is_empty(white_house), ]

white_house <- st_transform(white_house, 
                            crs = crs(calenviro)) %>% 
  st_make_valid()
```

# DOE EJMT Data
```{r troubleshooting_workflow}
# Step 1: Read shapefile
doe_ejmt <- st_read(here("data", "DOE_EJ_mapping_tool", "DAC Shapefiles (v2022c).shp"), quiet = TRUE) %>% 
            janitor::clean_names()

# str(doe_ejmt)

# Step 2: Filter for California
doe_ejmt <- doe_ejmt %>% filter(stateabb == "CA")

# Step 3: Validate and fix geometries
doe_ejmt <- st_make_valid(doe_ejmt)
doe_ejmt <- doe_ejmt[!st_is_empty(doe_ejmt), ]


# Step 4: Create a CA bounding box to assign to the data
calenviro <- st_transform(calenviro,  4326) %>% 
  st_make_valid()

ca_bbox <- st_bbox(calenviro)

doe_ejmt <- st_transform(doe_ejmt, 4326)

attr(st_geometry(doe_ejmt), "bbox") <- ca_bbox
```

# CDC SVI
```{r read_n_wrangle_cdc_svi}
cdc_svi <- read_csv(here("data", "CDC_Index", "California_SVI.csv"),
                    show_col_types = FALSE) %>% 
  janitor::clean_names() %>% 
  # match dtype w/ calenviro
  mutate(fips = as.double(fips))


# now cdc_svi contains geo-info and all the calenviro info
cdc_svi_geo <- left_join(cdc_svi, calenviro, by = c("fips" = "tract"))
                    
head(cdc_svi_geo , 3)     

# let's make it a spatial object for mapping now
cdc_svi_geo <- st_as_sf(cdc_svi_geo) %>% 
  st_transform(crs = 4326) %>% 
  st_make_valid()

# fix geometries
cdc_svi_geo <- cdc_svi_geo[!st_is_empty(cdc_svi_geo), ]
```

# CDC EJ
```{r read_n_wrangle_cdc_ej}
cdc_ej <- read_csv(here("data", "CDC_Index", "California_EJ.csv"),
                    show_col_types = FALSE) %>% 
  janitor::clean_names() %>% 
  # match dtype w/ calenviro
  mutate(geoid = as.double(geoid))

#head(cdc_ej , 3)   
  
# now cdc_svi contains geo-info and all the calenviro info
cdc_ej_geo <- left_join(cdc_ej, calenviro, by = c("geoid" = "tract"))
                    
head(cdc_ej_geo , 3)     

# let's make it a spatial object for mapping now
cdc_ej_geo <- st_as_sf(cdc_ej_geo) %>% 
  st_transform(crs = 4326) %>% 
  st_make_valid()

# fix geometries
cdc_ej_geo <- cdc_ej_geo[!st_is_empty(cdc_ej_geo), ]
```

# Map
```{r collective_map}
# we'll break housing burden into quantiles
bins <- seq(0, 100, by = 25)

# i want a map will all the data layered for for selection against calenviro
tmap_mode(mode = "view")

tm_shape(calenviro) +
  
  tm_basemap(leaflet::providers$OpenStreetMap) +
  
  tm_polygons(col = 'hous_burd',
              palette = 'plasma',
              style = 'fixed',
              breaks = bins) +
  
  # SB535
   tm_shape(sb535_geo) +
  
  # areas with overlap are made to be white,
  # as to "white out" areas not of interest  
  # the only visible regions are where the data do no overlap 
  tm_bubbles(size = .1,
             alpha = 0.5,
             palette = "plasma",
             border.col = 'white'
             ) + 
   
  
  # SD CEI
   tm_shape(sd_cei) +
  
  # areas with overlap are made to be white,
  # as to "white out" areas not of interest  
  # the only visible regions are where the data do no overlap 
  tm_bubbles(size = .1,
             alpha = 0.5,
             palette = "plasma",
             border.col = 'white'
             ) + 
  
  
  # White house
  tm_shape(white_house) +
  
  # areas with overlap are made to be white,
  # as to "white out" areas not of interest  
  # the only visible regions are where the data do no overlap 
  tm_bubbles(size = .1,
             alpha = 0.5,
             palette = "plasma",
             border.col = 'white'
             ) + 
  
  
  # DOE EJMT 
  tm_shape(doe_ejmt) +
  
  # areas with overlap are made to be white,
  # as to "white out" areas not of interest  
  # the only visible regions are where the data do no overlap 
  tm_bubbles(size = .1,
             alpha = 0.5,
             palette = "plasma",
             border.col = 'white'
             ) + 
  
  
  # CDC SVI
  tm_shape(cdc_svi_geo) +
  
  # areas with overlap are made to be white,
  # as to "white out" areas not of interest  
  # the only visible regions are where the data do no overlap 
 tm_bubbles(size = .1,
             alpha = 0.5,
             palette = "plasma",
             border.col = 'white'
             ) + 
  
  
  # CDC EJ
  tm_shape(cdc_ej_geo) +
  
  # areas with overlap are made to be white,
  # as to "white out" areas not of interest  
  # the only visible regions are where the data do no overlap 
  tm_bubbles(size = .1,
             alpha = 0.5,
             palette = "plasma",
             border.col = 'white'
            ) 
```


